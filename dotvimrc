"-------------------------------------------------------基本设置----------------------------------------------------------
set number		"设置行号
set laststatus=2	"显示状态栏（默认值为1，无法显示状态栏）
set hls				"搜索时高亮显示
set incsearch		"不需要回车就能搜索，但只能匹配一个
set showmode		"命令行显示当前vim模式
set showcmd			"命令行显示输入的命令,没看出效果"
set foldenable		"允许折叠"
set foldmethod=manual	"手动折叠"
set nocompatible	"去掉有关vi一致性模式，避免bug和局限"
set syntax=on		"语法高亮
set noeb			"在处理未保存或只读文件的时候，弹出确认"
set showmatch		"高亮显示匹配的括号"
set tabstop=4		"设置tab长度为4
set shiftwidth=4	"当使用shift键时，配合<<或>>进行缩进时，会用到
set cursorline		"突出显示当前行
set autoindent		"设置自动缩进，即回车时光标的坐标(x,y),x+1,y不变。没试出效果
set ignorecase		"搜索时忽略大小写"
set guifont=Consolas:h14
"set mouse=a	"启用后，vim内部赋值的文本将不会粘贴到vim外部

"-------------------------------------------------------cscope设置--------------------------------------------------------
"cscope的快捷键
set csprg=/usr/bin/cscope
set cscopequickfix=s-,c-,d-,i-,t-,e-
"cs find s ---- 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
"cs find g ---- 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
"cs find c ---- 查找调用本函数的函数
"cs find t ---- 查找指定的字符串
"cs find e ---- 查找egrep模式，相当于egrep功能，但查找速度快多了
"cs find f ---- 查找并打开文件，类似vim的find功能
"cs find i ---- 查找包含本文件的文件
"cs find d ---- 查找本函数调用的函数
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"cscope生成文件，使用快捷键临时生效
nmap <F10> :!find . -iname '*.c' -o -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' > cscope.files ;<CR>
	\:!cscope -b -i cscope.files -f cscope.out<CR>
	\:cs add cscope.out<CR>
	"\:cs kill -1<CR>:cs add cscope.out<CR>
	"<CR>是回车的意思

"------------------------------------------------------多窗口快捷键---------------------------------------------------------
" 向右分屏
map sl :set splitright<CR>:vsplit<CR>
" 向左分屏
map sh :set nosplitright<CR>:vsplit<CR>
" 向上分屏
map sk :set nosplitbelow<CR>:split<CR>
" 向下分屏
map sj :set splitbelow<CR>:split<CR>

"-------------------------------------------------------vundle插件设置----------------------------------------------------
"vundle
"使用前需要安装该插件
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/vundle/
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"格式: 'preservim/nerdtree' <==> https://github.com/preservim/nerdtree
Bundle 'powerline/powerline'
"Bundle 'camspiers/animate.vim'	"不带动画自动调整尺寸"
Plugin 'voldikss/vim-translator' "翻译插件
Plugin 'haohaiwei/gtrans'
Bundle 'camspiers/lens.vim'
Bundle 'frazrepo/vim-rainbow'
Bundle 'preservim/nerdtree'
Bundle 'preservim/nerdcommenter'
Bundle 'gmarik/vundle'
Bundle 'kien/ctrlp.vim'
Bundle 'sukima/xmledit'
Bundle 'sjl/gundo.vim'
Bundle 'jiangmiao/auto-pairs'
Bundle 'klen/python-mode'
Bundle 'Valloric/ListToggle'
Bundle 'SirVer/ultisnips'
"Bundle 'ycm-core/YouCompleteMe'
Bundle 'scrooloose/syntastic'
Bundle 't9md/vim-quickhl'
"Bundle 'scrooloose/merdcommenter'
Bundle 'YankRing.vim'
Bundle 'vcscommand.vim'
Bundle 'ShowPairs'
Bundle 'SudoEdit.vim'
Bundle 'EasyGrep'
Bundle 'VOom'
Bundle 'VimIM'
Plugin 'brookhong/cscope.vim'
Plugin 'Yggdroot/LeaderF'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'junegunn/fzf'

"-----------------------------------------------------color设置-----------------------------------------------------------
"set highlight
highlight Pmenu ctermbg=darkred
highlight PmenuSel ctermbg=red ctermfg=yellow
highlight Comment ctermfg=green	"注释颜色
"highlight Comment ctermbg=green
"highlight Comment ctermbg=blue

"-----------------------------------------------------编码设置-----------------------------------------------------------
set fileencodings=utf-8,gb2312,gbk,gb18030
"set termencoding=utf-8
"set encoding=prc

"-----------------------------------------------------NERDTree配置-----------------------------------------------------------
"NERDTree开启快捷键
map <F8> :NERDTree<CR>
"默认开启
autocmd VimEnter * NERDTree
"在目录框使用shift+i显示隐藏文件

"-------------------------------------------------------快捷键------------------------------------------------------------
nnoremap <F1> :set nonumber!<CR>:set foldcolumn=0<CR>
nnoremap <F2> :set mouse=v<CR>
nnoremap <F3> :set mouse=a<CR>
map <C-A> ggVG

"gtrans
nmap <C-t> :Gtrans<CR>
imap <C-t> <ESC>:Gtrans<CR>i
vmap <C-t> :call Gtrans()<CR>

"-------------------------------------------------------其他待整理--------------------------------------------------------
"翻译为，默认为简体中文
let g:translator_source_lang = 'zh'

"vim-rainbow配置
let g:rainbow_active = 1
let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

"set Tlist
let Tlist_Shoe_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Ctags_Cmd="/usr/bin/ctags"

"if has("vms")
"		set nobackup "do not keep a backup file use versions instead"
"else
"		set back "keep a backup file"
"endif
"

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"recgnise c/cpp
filetype plugin indent on

"set omnicppcomplete
let OmniCpp_MayCompleteDot=1	"open '.'
let OmniCpp_MayCompleteArrow=1	"open '->'
let OmniCpp_MayCompleteScope=1	"open '::'
let OmniCpp_NamespaceSearch=1	"open namespace
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DefaultNamespace=["std","_GLIBCXX_STD"]
let OmniCpp_ShowPrototypeInAbbr=1
let OmniCpp_SelectFirstItem=2
let OmniCpp_ShowAccess=1

au CursorMoved,InsertLeave * if pumvisible()==0|silent!pclose|endif
set completeopt=menuone,menu,longest
"-----------------------------------------------------gutentags-vim配置-------------------------------------------------
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

"这些都不用了，有自动生成的方法了
"-----------------------------------------------------指定ctags数据库文件-------------------------------------------------
"set ctags
"In Dalian
"一定要使用+=，否则会冲掉前面tags
"set tags+=~/test/sd55l_new_use/kernel-3.18/drivers/tags

"In NetEase
"set tags=/home/liujq05/code/almond/hassi_codo_0715/RK3566-SDK/tags
"现在使用vim-gutentags自动生成tags，不需要手动指定了

"-----------------------------------------------------指定ctags数据库文件-------------------------------------------------
"In NetEase
"set cscope.out file

